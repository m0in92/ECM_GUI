@startuml
'https://plantuml.com/class-diagram

BatteryCell *-right- ParameterSet
DTSolver *-up- BatteryCell
DTSolver -left-> Thevenin1RC
DTSolver -right-> Solution
DTSolver --> BaseCyclingStep
BaseCyclingStep <|-left- CustomStep
DTSolver *-- SPKF
DTSolver --> NormalRandomVariable

class ParameterSet {
+ R0: float
+ R1: float
+ C1: float
+ battery_cap: float

+ func_SOC_OCV: Callable
+ func_eta: Callable
}

class BatteryCell {
+ param: ParameterSet
+ soc_init: float
}

class Thevenin1RC {
+ <u> soc_next(dt: float, i_app: float, SOC_prev: float, Q: float, eta: float): float
+ <u> i_R1_next(dt: float, i_app: float, i_R1_prev: float, R1: float, C1: float): float
+ <u> v(i_app, OCV: float, R0: float, R1: float, i_R1: float): float
}

class Solution {
+ array_t
+ array_I
+ array_soc
+ array_V
+ array_cap_discharge

+ read_from_csv_file(file_path: str): Solution
+ update_arrays(): None
- is_discharge(): None
+ calc_discharge_cap(): float
+ mse(sol_exp: Solution): float

- <u> set_matplot_settings(): None
+ plot_comprehensive(): None
}

abstract class BaseCyclingStep {
+ time_elapsed: float

+ SOC_LIB: float
+ SOC_LIB_min: float
+ SOC_LIB_max: float

+ charge_current: float
+ discharge_current: float
+ rest_time: float

+ num_cycles: int
V_max: float
V_min: float
cycle_steps: list

+ reset(): None
+ get_current(...): float
}

class CustomStep {
array_t: npt.ArrayLike
array_I: npt.ArrayLike
}

class DTSolver {
+ b_cell: BatteryCell

- func_f(...)
- func_h(...)
+ solve(sol_exp: Solution, ...): Solution
}

SPKF -left-> NormalRandomVariable

class NormalRandomVariable {
+ vector: npt.ArrayLike
+ cov: npt.ArrayLike
+ dim(): int
}

class SPKF {
+ x: NormalRandomVariable
+ w: NormalRandomVariable
+ v: NormalRandomVariable
+ y_dim: int
+ func_f: Callable
+ func_h: Callable
+ Nx: int
+ Nw: int
+ Nv: int
+ L: int
+ p: int
+ method_type: str

+ gamma: float
+ h: float
+ aug_vector: npt.ArrayLike
+ aug_cov: npt.ArrayLike
+ array_alpha_m: npt.ArrayLike
+ array_alpha_c: npt.ArrayLike
+ x_sp: npt.ArrayLike
+ x_sp_x: npt.ArrayLike
+ x_sp_w: npt.ArrayLike
+ x_sp_v: npt.ArrayLike

+ <u>plot(): None

- state_prediction(u: float): tuple[npt.ArrayLike, npt.ArrayLike]
- cov_prediction(Xx: npt.ArrayLike): npt.ArrayLike
- output_estimate(Xx: npt.ArrayLike): npt.ArrayLike
- estimate_gain_matrix(y: npt.ArrayLike, yhat: npt.ArrayLike tuple[npt.ArrayLike, npt.ArrayLike]
- state_update(L: npt.ArrayLike, ytrue: npt.ArrayLike, yhat: npt.ArrayLike): None
- cov_measurement_update(Lx: npt.ArrayLike, SigmaY: npt.ArrayLike): None

+ solve(u: float, y_true: npt.ArrayLike)
}

@enduml

enum TimeUnit {
DAYS
HOURS
MINUTES
}

@enduml